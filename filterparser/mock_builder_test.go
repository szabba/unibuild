// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package filterparser_test is a generated GoMock package.
package filterparser_test

import (
	gomock "github.com/golang/mock/gomock"
	unibuild "github.com/szabba/unibuild"
	reflect "reflect"
)

// MockFiltersBuilder is a mock of FiltersBuilder interface
type MockFiltersBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockFiltersBuilderMockRecorder
}

// MockFiltersBuilderMockRecorder is the mock recorder for MockFiltersBuilder
type MockFiltersBuilderMockRecorder struct {
	mock *MockFiltersBuilder
}

// NewMockFiltersBuilder creates a new mock instance
func NewMockFiltersBuilder(ctrl *gomock.Controller) *MockFiltersBuilder {
	mock := &MockFiltersBuilder{ctrl: ctrl}
	mock.recorder = &MockFiltersBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFiltersBuilder) EXPECT() *MockFiltersBuilderMockRecorder {
	return m.recorder
}

// Include mocks base method
func (m *MockFiltersBuilder) Include(project string) {
	m.ctrl.Call(m, "Include", project)
}

// Include indicates an expected call of Include
func (mr *MockFiltersBuilderMockRecorder) Include(project interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Include", reflect.TypeOf((*MockFiltersBuilder)(nil).Include), project)
}

// WithDeps mocks base method
func (m *MockFiltersBuilder) WithDeps(project string) {
	m.ctrl.Call(m, "WithDeps", project)
}

// WithDeps indicates an expected call of WithDeps
func (mr *MockFiltersBuilderMockRecorder) WithDeps(project interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDeps", reflect.TypeOf((*MockFiltersBuilder)(nil).WithDeps), project)
}

// WithDependents mocks base method
func (m *MockFiltersBuilder) WithDependents(project string) {
	m.ctrl.Call(m, "WithDependents", project)
}

// WithDependents indicates an expected call of WithDependents
func (mr *MockFiltersBuilderMockRecorder) WithDependents(project interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDependents", reflect.TypeOf((*MockFiltersBuilder)(nil).WithDependents), project)
}

// Exclude mocks base method
func (m *MockFiltersBuilder) Exclude(project string) {
	m.ctrl.Call(m, "Exclude", project)
}

// Exclude indicates an expected call of Exclude
func (mr *MockFiltersBuilderMockRecorder) Exclude(project interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exclude", reflect.TypeOf((*MockFiltersBuilder)(nil).Exclude), project)
}

// Build mocks base method
func (m *MockFiltersBuilder) Build() []unibuild.Filter {
	ret := m.ctrl.Call(m, "Build")
	ret0, _ := ret[0].([]unibuild.Filter)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockFiltersBuilderMockRecorder) Build() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockFiltersBuilder)(nil).Build))
}
